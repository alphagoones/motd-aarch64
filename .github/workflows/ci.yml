name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  lint:
    name: Lint Scripts
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ShellCheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck
    
    - name: Run ShellCheck
      run: shellcheck install.sh

  test:
    name: Test Installation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Test Script Syntax
      run: bash -n install.sh
    
    - name: Test Help Function
      run: bash install.sh --help

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Linter
      uses: securecodewarrior/github-action-bandit@v1.0
      with:
        files: '.'
        format: 'json'
        output: 'bandit-report.json'
      continue-on-error: true
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby ruby-dev rubygems build-essential
        sudo gem install fpm
    
    - name: Extract Version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build Tar Package
      run: make package VERSION=${{ steps.version.outputs.VERSION }}
    
    - name: Build DEB Package
      run: make deb VERSION=${{ steps.version.outputs.VERSION }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/motd-aarch64-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: motd-aarch64-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload DEB Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/motd-aarch64_${{ steps.version.outputs.VERSION }}_arm64.deb
        asset_name: motd-aarch64_${{ steps.version.outputs.VERSION }}_arm64.deb
        asset_content_type: application/vnd.debian.binary-package

  documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Generate Documentation
      run: |
        # Générer la documentation automatiquement si nécessaire
        echo "Documentation updated on $(date)" >> CHANGELOG.md
    
    - name: Commit Documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --staged --quiet || git commit -m "docs: Update documentation [skip ci]"
        git push
